#! /usr/bin/env ruby

require 'pg'
require 'io/console'
require 'pry'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
  end

  def list_expenses
    result = @connection.exec "SELECT * FROM expenses;"
    print_expenses(result)
  end

  def search_expenses(string)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{string}%"])
    print_expenses(result)
  end

  def add_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo) VALUES($1, $2)"
    @connection.exec_params(sql, [amount, memo])
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense was deleted:"
      print_expenses(result)
    else
      puts "There is no expense with the id '#{id}'"
    end
  end

  def clear_expenses
    sql = "DELETE FROM expenses"
    @connection.exec_params(sql, [])
    puts 'All expenses have been deleted'
  end

  private

  def print_expenses(result)
    puts 'No results found' if result.count == 0

    result.each do |tuple|
      columns = [ tuple['id'].rjust(3),
                  tuple['created_on'].rjust(10),
                  tuple['amount'].rjust(12),
                  tuple['memo'] ]

      puts columns.join ' | '
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
    @arguments = ARGV
  end

  def print_help
    puts <<~HELP
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end

  def valid_arguments?
    if @arguments[0] == 'add'&& (@arguments[1].nil? || @arguments[2].nil?)
      false
    else
      true
    end
  end

  def delete_all_confirmed?
    response = nil
    puts 'This will remove all expenses. Are you sure? (y/n)'

    loop do
      response = $stdin.gets.chomp.downcase
      break response if %w(y n).include? response
      puts 'Please enter y to delete all expenses. Enter n to cancel.'
    end

    true if response == 'y'
  end

  def run(arguments) 
    command = arguments[0]
    amount = arguments[1]
    memo = arguments[2]
    search_text = arguments[1]
    expense_id = arguments[1]

    if command == 'list' 
      @application.list_expenses
    elsif command == 'add'
      if valid_arguments?
        @application.add_expense(amount, memo)
      else
        message 'You must provide an amount and memo.'
      end
    elsif command == 'search'
      @application.search_expenses(search_text)
    elsif command == 'delete'
      @application.delete_expense(expense_id)
    elsif command == 'clear'
      @application.clear_expenses if delete_all_confirmed?
    else
      print_help
    end
  end

  def message(text)
    puts text
  end
end

CLI.new.run ARGV
